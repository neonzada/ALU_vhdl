// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/15/2024 12:39:24"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    ULAcompleta
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ULAcompleta_vlg_sample_tst(
	a,
	b,
	sel,
	sampler_tx
);
input [3:0] a;
input [3:0] b;
input [2:0] sel;
output sampler_tx;

reg sample;
time current_time;
always @(a or b or sel)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module ULAcompleta_vlg_check_tst (
	c,
	disp,
	n,
	outwave,
	v,
	z,
	sampler_rx
);
input  c;
input [13:0] disp;
input  n;
input [3:0] outwave;
input  v;
input  z;
input sampler_rx;

reg  c_expected;
reg [13:0] disp_expected;
reg  n_expected;
reg [3:0] outwave_expected;
reg  v_expected;
reg  z_expected;

reg  c_prev;
reg [13:0] disp_prev;
reg  n_prev;
reg [3:0] outwave_prev;
reg  v_prev;
reg  z_prev;

reg  c_expected_prev;
reg [13:0] disp_expected_prev;
reg  n_expected_prev;
reg [3:0] outwave_expected_prev;
reg  v_expected_prev;
reg  z_expected_prev;

reg  last_c_exp;
reg [13:0] last_disp_exp;
reg  last_n_exp;
reg [3:0] last_outwave_exp;
reg  last_v_exp;
reg  last_z_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:6] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 6'b1;
end

// update real /o prevs

always @(trigger)
begin
	c_prev = c;
	disp_prev = disp;
	n_prev = n;
	outwave_prev = outwave;
	v_prev = v;
	z_prev = z;
end

// update expected /o prevs

always @(trigger)
begin
	c_expected_prev = c_expected;
	disp_expected_prev = disp_expected;
	n_expected_prev = n_expected;
	outwave_expected_prev = outwave_expected;
	v_expected_prev = v_expected;
	z_expected_prev = z_expected;
end



// expected c
initial
begin
	c_expected = 1'bX;
end 
// expected disp[ 13 ]
initial
begin
	disp_expected[13] = 1'bX;
end 
// expected disp[ 12 ]
initial
begin
	disp_expected[12] = 1'bX;
end 
// expected disp[ 11 ]
initial
begin
	disp_expected[11] = 1'bX;
end 
// expected disp[ 10 ]
initial
begin
	disp_expected[10] = 1'bX;
end 
// expected disp[ 9 ]
initial
begin
	disp_expected[9] = 1'bX;
end 
// expected disp[ 8 ]
initial
begin
	disp_expected[8] = 1'bX;
end 
// expected disp[ 7 ]
initial
begin
	disp_expected[7] = 1'bX;
end 
// expected disp[ 6 ]
initial
begin
	disp_expected[6] = 1'bX;
end 
// expected disp[ 5 ]
initial
begin
	disp_expected[5] = 1'bX;
end 
// expected disp[ 4 ]
initial
begin
	disp_expected[4] = 1'bX;
end 
// expected disp[ 3 ]
initial
begin
	disp_expected[3] = 1'bX;
end 
// expected disp[ 2 ]
initial
begin
	disp_expected[2] = 1'bX;
end 
// expected disp[ 1 ]
initial
begin
	disp_expected[1] = 1'bX;
end 
// expected disp[ 0 ]
initial
begin
	disp_expected[0] = 1'bX;
end 

// expected n
initial
begin
	n_expected = 1'bX;
end 
// expected outwave[ 3 ]
initial
begin
	outwave_expected[3] = 1'bX;
end 
// expected outwave[ 2 ]
initial
begin
	outwave_expected[2] = 1'bX;
end 
// expected outwave[ 1 ]
initial
begin
	outwave_expected[1] = 1'bX;
end 
// expected outwave[ 0 ]
initial
begin
	outwave_expected[0] = 1'bX;
end 

// expected v
initial
begin
	v_expected = 1'bX;
end 

// expected z
initial
begin
	z_expected = 1'bX;
end 
// generate trigger
always @(c_expected or c or disp_expected or disp or n_expected or n or outwave_expected or outwave or v_expected or v or z_expected or z)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected c = %b | expected disp = %b | expected n = %b | expected outwave = %b | expected v = %b | expected z = %b | ",c_expected_prev,disp_expected_prev,n_expected_prev,outwave_expected_prev,v_expected_prev,z_expected_prev);
	$display("| real c = %b | real disp = %b | real n = %b | real outwave = %b | real v = %b | real z = %b | ",c_prev,disp_prev,n_prev,outwave_prev,v_prev,z_prev);
`endif
	if (
		( c_expected_prev !== 1'bx ) && ( c_prev !== c_expected_prev )
		&& ((c_expected_prev !== last_c_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_exp = c_expected_prev;
	end
	if (
		( disp_expected_prev[0] !== 1'bx ) && ( disp_prev[0] !== disp_expected_prev[0] )
		&& ((disp_expected_prev[0] !== last_disp_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp_expected_prev);
		$display ("     Real value = %b", disp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_disp_exp[0] = disp_expected_prev[0];
	end
	if (
		( disp_expected_prev[1] !== 1'bx ) && ( disp_prev[1] !== disp_expected_prev[1] )
		&& ((disp_expected_prev[1] !== last_disp_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp_expected_prev);
		$display ("     Real value = %b", disp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_disp_exp[1] = disp_expected_prev[1];
	end
	if (
		( disp_expected_prev[2] !== 1'bx ) && ( disp_prev[2] !== disp_expected_prev[2] )
		&& ((disp_expected_prev[2] !== last_disp_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp_expected_prev);
		$display ("     Real value = %b", disp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_disp_exp[2] = disp_expected_prev[2];
	end
	if (
		( disp_expected_prev[3] !== 1'bx ) && ( disp_prev[3] !== disp_expected_prev[3] )
		&& ((disp_expected_prev[3] !== last_disp_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp_expected_prev);
		$display ("     Real value = %b", disp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_disp_exp[3] = disp_expected_prev[3];
	end
	if (
		( disp_expected_prev[4] !== 1'bx ) && ( disp_prev[4] !== disp_expected_prev[4] )
		&& ((disp_expected_prev[4] !== last_disp_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp_expected_prev);
		$display ("     Real value = %b", disp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_disp_exp[4] = disp_expected_prev[4];
	end
	if (
		( disp_expected_prev[5] !== 1'bx ) && ( disp_prev[5] !== disp_expected_prev[5] )
		&& ((disp_expected_prev[5] !== last_disp_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp_expected_prev);
		$display ("     Real value = %b", disp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_disp_exp[5] = disp_expected_prev[5];
	end
	if (
		( disp_expected_prev[6] !== 1'bx ) && ( disp_prev[6] !== disp_expected_prev[6] )
		&& ((disp_expected_prev[6] !== last_disp_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp_expected_prev);
		$display ("     Real value = %b", disp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_disp_exp[6] = disp_expected_prev[6];
	end
	if (
		( disp_expected_prev[7] !== 1'bx ) && ( disp_prev[7] !== disp_expected_prev[7] )
		&& ((disp_expected_prev[7] !== last_disp_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp_expected_prev);
		$display ("     Real value = %b", disp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_disp_exp[7] = disp_expected_prev[7];
	end
	if (
		( disp_expected_prev[8] !== 1'bx ) && ( disp_prev[8] !== disp_expected_prev[8] )
		&& ((disp_expected_prev[8] !== last_disp_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp_expected_prev);
		$display ("     Real value = %b", disp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_disp_exp[8] = disp_expected_prev[8];
	end
	if (
		( disp_expected_prev[9] !== 1'bx ) && ( disp_prev[9] !== disp_expected_prev[9] )
		&& ((disp_expected_prev[9] !== last_disp_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp_expected_prev);
		$display ("     Real value = %b", disp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_disp_exp[9] = disp_expected_prev[9];
	end
	if (
		( disp_expected_prev[10] !== 1'bx ) && ( disp_prev[10] !== disp_expected_prev[10] )
		&& ((disp_expected_prev[10] !== last_disp_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp_expected_prev);
		$display ("     Real value = %b", disp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_disp_exp[10] = disp_expected_prev[10];
	end
	if (
		( disp_expected_prev[11] !== 1'bx ) && ( disp_prev[11] !== disp_expected_prev[11] )
		&& ((disp_expected_prev[11] !== last_disp_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp_expected_prev);
		$display ("     Real value = %b", disp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_disp_exp[11] = disp_expected_prev[11];
	end
	if (
		( disp_expected_prev[12] !== 1'bx ) && ( disp_prev[12] !== disp_expected_prev[12] )
		&& ((disp_expected_prev[12] !== last_disp_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp_expected_prev);
		$display ("     Real value = %b", disp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_disp_exp[12] = disp_expected_prev[12];
	end
	if (
		( disp_expected_prev[13] !== 1'bx ) && ( disp_prev[13] !== disp_expected_prev[13] )
		&& ((disp_expected_prev[13] !== last_disp_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp_expected_prev);
		$display ("     Real value = %b", disp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_disp_exp[13] = disp_expected_prev[13];
	end
	if (
		( n_expected_prev !== 1'bx ) && ( n_prev !== n_expected_prev )
		&& ((n_expected_prev !== last_n_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n_expected_prev);
		$display ("     Real value = %b", n_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_n_exp = n_expected_prev;
	end
	if (
		( outwave_expected_prev[0] !== 1'bx ) && ( outwave_prev[0] !== outwave_expected_prev[0] )
		&& ((outwave_expected_prev[0] !== last_outwave_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outwave[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outwave_expected_prev);
		$display ("     Real value = %b", outwave_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outwave_exp[0] = outwave_expected_prev[0];
	end
	if (
		( outwave_expected_prev[1] !== 1'bx ) && ( outwave_prev[1] !== outwave_expected_prev[1] )
		&& ((outwave_expected_prev[1] !== last_outwave_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outwave[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outwave_expected_prev);
		$display ("     Real value = %b", outwave_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outwave_exp[1] = outwave_expected_prev[1];
	end
	if (
		( outwave_expected_prev[2] !== 1'bx ) && ( outwave_prev[2] !== outwave_expected_prev[2] )
		&& ((outwave_expected_prev[2] !== last_outwave_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outwave[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outwave_expected_prev);
		$display ("     Real value = %b", outwave_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outwave_exp[2] = outwave_expected_prev[2];
	end
	if (
		( outwave_expected_prev[3] !== 1'bx ) && ( outwave_prev[3] !== outwave_expected_prev[3] )
		&& ((outwave_expected_prev[3] !== last_outwave_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outwave[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outwave_expected_prev);
		$display ("     Real value = %b", outwave_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outwave_exp[3] = outwave_expected_prev[3];
	end
	if (
		( v_expected_prev !== 1'bx ) && ( v_prev !== v_expected_prev )
		&& ((v_expected_prev !== last_v_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port v :: @time = %t",  $realtime);
		$display ("     Expected value = %b", v_expected_prev);
		$display ("     Real value = %b", v_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_v_exp = v_expected_prev;
	end
	if (
		( z_expected_prev !== 1'bx ) && ( z_prev !== z_expected_prev )
		&& ((z_expected_prev !== last_z_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port z :: @time = %t",  $realtime);
		$display ("     Expected value = %b", z_expected_prev);
		$display ("     Real value = %b", z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_z_exp = z_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module ULAcompleta_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] a;
reg [3:0] b;
reg [2:0] sel;
// wires                                               
wire c;
wire [13:0] disp;
wire n;
wire [3:0] outwave;
wire v;
wire z;

wire sampler;                             

// assign statements (if any)                          
ULAcompleta i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.b(b),
	.c(c),
	.disp(disp),
	.n(n),
	.outwave(outwave),
	.sel(sel),
	.v(v),
	.z(z)
);
// a[ 3 ]
initial
begin
	a[3] = 1'b0;
end 
// a[ 2 ]
initial
begin
	a[2] = 1'b0;
end 
// a[ 1 ]
initial
begin
	a[1] = 1'b1;
end 
// a[ 0 ]
initial
begin
	a[0] = 1'b1;
end 
// b[ 3 ]
initial
begin
	b[3] = 1'b0;
end 
// b[ 2 ]
initial
begin
	b[2] = 1'b0;
end 
// b[ 1 ]
initial
begin
	b[1] = 1'b0;
end 
// b[ 0 ]
initial
begin
	b[0] = 1'b1;
end 
// sel[ 2 ]
initial
begin
	sel[2] = 1'b0;
end 
// sel[ 1 ]
initial
begin
	sel[1] = 1'b0;
end 
// sel[ 0 ]
initial
begin
	sel[0] = 1'b0;
end 

ULAcompleta_vlg_sample_tst tb_sample (
	.a(a),
	.b(b),
	.sel(sel),
	.sampler_tx(sampler)
);

ULAcompleta_vlg_check_tst tb_out(
	.c(c),
	.disp(disp),
	.n(n),
	.outwave(outwave),
	.v(v),
	.z(z),
	.sampler_rx(sampler)
);
endmodule

